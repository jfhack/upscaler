#!/usr/bin/env python
import argparse
from pathlib import Path
import sys
import subprocess
import os

def safe_name(name):
  return name.replace(':', '_').lower()

def with_stem(path, stem):
  return path.with_name(stem + path.suffix)

class RawMultilineFormatter(argparse.RawDescriptionHelpFormatter):
  def _split_lines(self, text, width):
    if '\n' in text:
      content = []
      for i in text.splitlines():
        if i == '':
          content.append(i)
        else:
          content.extend(argparse.HelpFormatter._split_lines(self, i, width))
      return content
    return argparse.HelpFormatter._split_lines(self, text, width)

def main():
  models = [
    "rudalle",

    "g:1",
    "g:1.2",
    "g:1.3",
    "g:1.4",
    "g:RestoreFormer",

    "r:RealESRGAN_x4plus",
    "r:RealESRNet_x4plus",
    "r:RealESRGAN_x4plus_anime_6B",
    "r:RealESRGAN_x2plus",
    "r:realesr-animevideov3",
    "r:realesr-general-x4v3"
  ]
  models.sort()

  def list_models():
    print('Available models:')
    prev = None
    for model in models:
      if prev is not None and model[:2] != prev:
        print()
      print(f'  {model}')
      prev = model[:2]
    sys.exit(0)

  model_help = ''.join([f'{model}\n' for model in models])
  epilog = (
    'optional arguments:\n'
    '  -s SCALE, --scale SCALE\n'
    '                        upscaling factor, default 2\n'
    '  --force-png-output    force output to be PNG\n'
    '  --gfpgan-args ...\n'
    '                        GFPGAN original args\n'
    '  --realesrgan-args ...\n'
    '                        Real-ESRGAN original args\n\n'
    "                        Note: if you want to use with '--gfpgan-args',\n"
    "                        you must use them in this order:\n"
    "                        '--realesrgan-args ... --gfpgan-args ...'\n\n"
    'examples:\n\n'
    '%(prog)s input output g:1.3\n'
    '%(prog)s input output g:1.3 -s 4 --force-png-output\n'
    '%(prog)s input output all --force-png-output\n'
  )
  parser = argparse.ArgumentParser(
    description='Upscale images',
    epilog=epilog,
    formatter_class=RawMultilineFormatter
  )
  parser.add_argument('input', type=Path, help='input directory')
  parser.add_argument('output', type=Path, help='output directory')
  parser.add_argument('model', type=str, help=(
    'model to use; one of the following:\n\n'
    f'{model_help}\n'
    'if MODEL is "all", it will run all models.\n'
    'You can use more models by joining them '
    'with a comma without any spaces, '
    'e.g., "g:1.3,r:RealESRGAN_x4plus". This '
    'will generate a subdirectory for each model in the '
    'output directory, using lowercased and underscored '
    'model names as subdirectory names; for example, '
    'r:RealESRGAN_x4plus_anime_6B will '
    'be r_realesrgan_x4plus_anime_6b\n\n'
  ))
  parser.add_argument('-l', '--list', action='store_true', help='list available models')
  parser.add_argument('--uid', type=int, help=(
    'user ID; since the Docker image uses a root account, '
    'everything it creates will be under that account, but once '
    'finished, these IDs will be used. By default, it uses those '
    'of the user who runs the script'
  ), default=os.getuid())
  parser.add_argument('--gid', type=int, help='group ID; the same as user ID but for the group', default=os.getgid())
  parser.add_argument('--compare', type=str, help=(
    'name of the image to compare against; it is required to have used at '
    'least two models since they create the expected subdirectories. It will '
    'create a subdirectory called "comparison" with a link to the original image, '
    'and the images generated by the models'
  ))
  parser.add_argument('args...', help='optional arguments passed directly to the Docker container upscaler', nargs='*')

  optional_args = []

  if len(sys.argv) > 1:
    if sys.argv[1] == '-l' or sys.argv[1] == '--list':
      list_models()

  args, optional_args = parser.parse_known_args()

  if args.list:
    list_models()

  if args.input.is_dir() is False:
    print(f'input directory "{args.input}" does not exist')
    sys.exit(1)

  docker_args = ["docker", "run", "--gpus", "all", "-it", "--rm", "--ipc", "host"]

  if args.model == "all":
    user_models = models
  else:
    user_models = args.model.split(',')

  if args.compare:
    if args.input.joinpath(args.compare).is_file() is False:
      print(f'The original image "{args.compare}" does not exist')
      sys.exit(1)

    if args.output.is_dir() is False:
      print(f'Output directory "{args.output}" does not exist')
      sys.exit(1)

    model_images = []
    for model in user_models:
      image = args.output.joinpath(safe_name(model), args.compare)
      if image.is_file():
        model_images.append((model, image))
      else:
        base_name, _ = os.path.splitext(args.compare)
        image = args.output.joinpath(safe_name(model)).glob(f'{base_name}*')
        for i in image:
          model_images.append((model, i))
          break

    if len(model_images) == 0:
      print(f'No images found for the models {" ,".join(user_models)}')
      sys.exit(1)

    args.output.joinpath('comparison').mkdir(parents=True, exist_ok=True)
    source = with_stem(args.output.joinpath('comparison', args.compare), "original")
    source.unlink(missing_ok=True)
    source.symlink_to(args.input.joinpath(args.compare).resolve())
    for model, image in model_images:
      generated = args.output.joinpath('comparison', safe_name(model) + image.suffix)
      generated.unlink(missing_ok=True)
      generated.symlink_to(image.resolve())
    sys.exit(0)
  
  if len(user_models) > 1:
    for model in user_models:
      args.output.resolve().mkdir(parents=True, exist_ok=True)
      output = args.output.resolve() / safe_name(model)
      subprocess.run([
        *docker_args,
        "-v", f"{args.input.resolve()}:/input",
        "-v", f"{output}:/output",
        "ghcr.io/jfhack/upscaler:latest",
        "--model", model,
        "--uid", f"{args.uid}",
        "--gid", f"{args.gid}",
        *optional_args
      ])
  else:
    subprocess.run([
      *docker_args,
      "-v", f"{args.input.resolve()}:/input",
      "-v", f"{args.output.resolve()}:/output",
      "ghcr.io/jfhack/upscaler:latest",
      "--model", args.model,
      "--uid", f"{args.uid}",
      "--gid", f"{args.gid}",
      *optional_args
    ])


if __name__ == "__main__":
  main()
